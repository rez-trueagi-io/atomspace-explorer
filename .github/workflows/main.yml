# .github/workflows/main.yml

name: Durable CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - master
      - main
      - develop

jobs:
  setup:
    name: Setup and Install Dependencies
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14.x, 16.x, 18.x]
        model-type: [standard, gguf]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Node.js modules
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: |
          if [ "${{ matrix.model-type }}" == "gguf" ]; then
            npm install --some-gguf-specific-flag
          else
            npm install
          fi
        env:
          CI: true

  lint:
    name: Lint Code
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14.x, 16.x, 18.x]
        model-type: [standard, gguf]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: |
          if [ "${{ matrix.model-type }}" == "gguf" ]; then
            npm install --some-gguf-specific-flag
          else
            npm install
          fi
        env:
          CI: true

      - name: Run Lint
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14.x, 16.x, 18.x]
        model-type: [standard, gguf]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: |
          if [ "${{ matrix.model-type }}" == "gguf" ]; then
            npm install --some-gguf-specific-flag
          else
            npm install
          fi
        env:
          CI: true

      - name: Run Tests
        run: npm test -- --watch=false --no-progress --browsers=ChromeHeadlessCI

      - name: Run GGUF Specific Tests
        if: matrix.model-type == 'gguf'
        run: |
          wget https://example.com/path/to/sample.gguf -O sample.gguf
          npm run test:gguf -- --model=sample.gguf

  build:
    name: Build Application
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14.x, 16.x, 18.x]
        build-type: [debug, release]
        model-type: [standard, gguf]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: |
          if [ "${{ matrix.model-type }}" == "gguf" ]; then
            npm install --some-gguf-specific-flag
          else
            npm install
          fi
        env:
          CI: true

      - name: Build Application
        run: |
          if [ "${{ matrix.build-type }}" == "release" ]; then
            npm run build -- --prod
          else
            npm run build -- --configuration=${{ matrix.build-type }}
          fi

      - name: Archive Build
        uses: actions/upload-artifact@v3
        with:
          name: production-build-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.build-type }}-${{ matrix.model-type }}
          path: dist/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download All Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build-*
          path: build/

      - name: Compress All Build Artifacts
        run: |
          for file in build/*; do
            zip -r "${file}.zip" "$file"
          done

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/
          asset_name: atomspace-explorer-builds.zip
          asset_content_type: application/zip

#      - name: Notify via Slack (Optional)
#        if: success()
#        uses: slackapi/slack-github-action@v1.20.0
#        with:
#          payload: '{"text":"New Release v1.0.${{ github.run_number }} Created Successfully!"}'
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
